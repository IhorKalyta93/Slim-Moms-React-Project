{"version":3,"file":"static/js/586.39b1f402.chunk.js","mappings":"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","sources":["components/DiaryAddProductForm/DiaryFormValidation/DiaryFormValidation.jsx","components/InputField/InputField.styled.jsx","components/InputField/InputField.jsx","pages/RegistrationPage/Registration.styled.jsx","pages/RegistrationPage/RegistrationPage.jsx","utils/noop.js"],"sourcesContent":["import { FormErrorMessage } from '@chakra-ui/react';\r\n\r\nimport React from 'react';\r\n\r\nexport default function DiaryFormValidation({ text }) {\r\n  return (\r\n    <FormErrorMessage\r\n      fontSize=\"8px\"\r\n      m=\"0\"\r\n      position=\"absolute\"\r\n      top={{ xs: '50px', md: '70px' }}\r\n    >\r\n      {text}\r\n    </FormErrorMessage>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FormLabel = styled.label`\r\n  display: block;\r\n  position: relative;\r\n  height: 46px;\r\n\r\n  &:focus-within span {\r\n    bottom: 25px;\r\n\r\n    font-size: 12px;\r\n    color: #fc842d;\r\n\r\n    @media screen and (min-width: 768px) {\r\n      bottom: 32px;\r\n    }\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    height: 60px;\r\n  }\r\n`;\r\n\r\nexport const LabelName = styled.span`\r\n  position: absolute;\r\n  bottom: 8px;\r\n\r\n  font-family: 'Verdana';\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 14px;\r\n  line-height: 1.21;\r\n  letter-spacing: 0.04em;\r\n\r\n  color: #9b9faa;\r\n\r\n  transition: bottom 300ms ease, color 300ms ease, font-size 300ms ease;\r\n  z-index: 10;\r\n  @media screen and (min-width: 768px) {\r\n    bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  position: absolute;\r\n  bottom: 0;\r\n\r\n  width: 100%;\r\n \r\n\r\n  letter-spacing: 0.04em;\r\n\r\n  border-bottom: 1px solid #e0e0e0;\r\n\r\n  transition: border-color 300ms ease;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    padding-bottom: 5px;\r\n  }\r\n\r\n  &:focus-within {\r\n    border-bottom: 1px solid #fc842d;\r\n    outline: none;\r\n  }\r\n\r\n  &:not(:placeholder-shown) {\r\n    border-bottom: 1px solid #fc842d;\r\n  }\r\n\r\n  &:not(:placeholder-shown) ~ span {\r\n    bottom: 25px;\r\n    color: #fc842d;\r\n\r\n    font-size: 12px;\r\n    @media screen and (min-width: 768px) {\r\n      bottom: 32px;\r\n    }\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FormLabel, LabelName, Input } from './InputField.styled';\r\n\r\nexport default function InputField({\r\n  labelName,\r\n  handlerEvent,\r\n  width,\r\n  right,\r\n  ...inputSetting\r\n}) {\r\n  return (\r\n    <>\r\n      <FormLabel style={(width = { width })}>\r\n        <Input onChange={handlerEvent} {...inputSetting} placeholder=\" \" />\r\n        <LabelName style={{ right: right }}>{labelName}</LabelName>\r\n      </FormLabel>\r\n    </>\r\n  );\r\n}\r\n\r\nInputField.propTypes = {\r\n  labelName: PropTypes.string,\r\n  handlerEvent: PropTypes.func.isRequired,\r\n  width: PropTypes.string,\r\n  right: PropTypes.number,\r\n};\r\n","import styled from '@emotion/styled';\r\nimport desktopMainBg from '../../assets/bg/desktopMainBg.png';\r\nimport tabletMainBg from '../../assets/bg/tabletMainBg.png';\r\n\r\nexport const BgImg = styled.div`\r\n  @media screen and (min-width: 768px) {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n\r\n    width: 100vw;\r\n    height: 100vh;\r\n\r\n    background-image: url(${tabletMainBg});\r\n    background-repeat: no-repeat;\r\n    background-position: right bottom;\r\n    background-size: contain;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    background-image: url(${desktopMainBg});\r\n  }\r\n`;\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex, FormControl,\r\n  Heading,\r\n  VStack\r\n} from \"@chakra-ui/react\";\r\nimport InputField from \"../../components/InputField/InputField\";\r\nimport authOperations from \"../../redux/auth/authOperations\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {BgImg} from \"./Registration.styled\";\r\nimport {customColors} from \"../../theme/colors\";\r\nimport * as Yup from \"yup\";\r\nimport {authSelectors} from \"../../redux/auth/authSelectors\";\r\nimport {noop} from \"../../utils/noop\";\r\nimport DiaryFormValidation from \"../../components/DiaryAddProductForm/DiaryFormValidation/DiaryFormValidation\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('This field is required'),\r\n  email: Yup.string()\r\n    .email('Invalid email')\r\n    .required('This field is required'),\r\n  password: Yup.string()\r\n    .min(5, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('This field is required'),\r\n});\r\n\r\nexport default function RegistrationPage() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const registrationLoading = useSelector(authSelectors.registrationLoading);\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  }\r\n  const onSubmit = (values) => {\r\n    const {email, password, name} = values;\r\n    dispatch(authOperations.register({email, password, username: name}))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BgImg/>\r\n      <Flex\r\n        w={{xs: '100%', md: 'auto'}}\r\n        justify=\"flex-start\"\r\n        alignItems={{xs: 'flex-start', lg: 'center'}}\r\n        flexGrow='1'\r\n        pt={{xs: '38px', md: '150px'}}\r\n        pb={{xs: '50px', lg: '25px'}}\r\n      >\r\n        <Box\r\n          flexGrow='1'\r\n        >\r\n          <Heading\r\n            as='h1' size='xs' mb='34px'\r\n            w={{xs: '100%', md: 'auto'}}\r\n            textAlign={{xs: 'center', md: 'left'}}\r\n            color={customColors.sun[\"100\"]}\r\n            textTransform='uppercase'\r\n          >Registration</Heading>\r\n          <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n            {() => (\r\n              <Form>\r\n                <VStack spacing={7} align=\"flex-start\" mb={{xs: '60px', lg: '60px'}}>\r\n\r\n                  <Field name=\"name\">{({field, form}) => (\r\n                    <Box w={{xs: '100%', md: '240px'}}>\r\n                      <FormControl isInvalid={form.errors.email && form.touched.email}>\r\n                        <InputField\r\n                          labelName=\"Name *\"\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          handlerEvent={noop}\r\n                          // value={formik.values.name}\r\n                          required\r\n                          width=\"100%\"\r\n                          {...field}\r\n                        />\r\n                        <DiaryFormValidation text={form.errors.email}/>\r\n                      </FormControl>\r\n                    </Box>\r\n                  )}\r\n                  </Field>\r\n\r\n                  <Field name=\"email\">{({field, form}) => (\r\n                    <Box w={{xs: '100%', md: '240px'}}>\r\n                      <FormControl isInvalid={form.errors.email && form.touched.email}>\r\n                        <InputField\r\n                          labelName=\"Email *\"\r\n                          type=\"text\"\r\n                          name=\"email\"\r\n                          handlerEvent={noop}\r\n                          // value={formik.values.email}\r\n                          required\r\n                          width=\"100%\"\r\n                          {...field}\r\n                        />\r\n                        <DiaryFormValidation text={form.errors.email}/>\r\n                      </FormControl>\r\n                    </Box>\r\n                  )}\r\n                  </Field>\r\n                  <Field name=\"password\">{({field, form}) => (\r\n                    <Box w={{xs: '100%', md: '240px'}}>\r\n                      <FormControl isInvalid={form.errors.email && form.touched.email}>\r\n                        <InputField\r\n                          labelName=\"Password *\"\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          handlerEvent={noop}\r\n                          // value={formik.values.password}\r\n                          required\r\n                          width=\"100%\"\r\n                          {...field}\r\n                        />\r\n                        <DiaryFormValidation text={form.errors.email}/>\r\n                      </FormControl>\r\n                    </Box>\r\n                  )}\r\n                  </Field>\r\n                </VStack>\r\n                <Flex\r\n                  gap={6}\r\n                  flexDirection={{xs: 'column', md: 'row'}}\r\n                  alignItems={{xs: 'center'}}\r\n                >\r\n                  <Button variant={'outline'} type=\"button\" onClick={() => navigate('/login')}>Login</Button>\r\n                  <Button variant={'primary'} type=\"submit\" isLoading={registrationLoading}>Register</Button>\r\n                </Flex>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </Flex>\r\n    </>\r\n  );\r\n}\r\n","export const noop = () => {}\r\n"],"names":["DiaryFormValidation","text","fontSize","m","position","top","xs","md","FormLabel","styled","LabelName","Input","InputField","labelName","handlerEvent","width","right","inputSetting","style","onChange","placeholder","BgImg","tabletMainBg","desktopMainBg","validationSchema","Yup","shape","name","min","max","required","email","password","RegistrationPage","dispatch","useDispatch","navigate","useNavigate","registrationLoading","useSelector","authSelectors","w","justify","alignItems","lg","flexGrow","pt","pb","as","size","mb","textAlign","color","customColors","textTransform","initialValues","onSubmit","values","authOperations","username","spacing","align","field","form","isInvalid","errors","touched","type","noop","gap","flexDirection","variant","onClick","isLoading"],"sourceRoot":""}