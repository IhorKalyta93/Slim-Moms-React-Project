{"version":3,"file":"static/js/534.ffa21205.chunk.js","mappings":"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","sources":["components/DiaryAddProductForm/DiaryFormValidation/DiaryFormValidation.jsx","components/InputField/InputField.styled.jsx","components/InputField/InputField.jsx","pages/LogInPage/LogIn.styled.jsx","pages/LogInPage/LogInPage.jsx","utils/noop.js"],"sourcesContent":["import { FormErrorMessage } from '@chakra-ui/react';\r\n\r\nimport React from 'react';\r\n\r\nexport default function DiaryFormValidation({ text }) {\r\n  return (\r\n    <FormErrorMessage\r\n      fontSize=\"8px\"\r\n      m=\"0\"\r\n      position=\"absolute\"\r\n      top={{ xs: '50px', md: '70px' }}\r\n    >\r\n      {text}\r\n    </FormErrorMessage>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FormLabel = styled.label`\r\n  display: block;\r\n  position: relative;\r\n  height: 46px;\r\n\r\n  &:focus-within span {\r\n    bottom: 25px;\r\n\r\n    font-size: 12px;\r\n    color: #fc842d;\r\n\r\n    @media screen and (min-width: 768px) {\r\n      bottom: 32px;\r\n    }\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    height: 60px;\r\n  }\r\n`;\r\n\r\nexport const LabelName = styled.span`\r\n  position: absolute;\r\n  bottom: 8px;\r\n\r\n  font-family: 'Verdana';\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 14px;\r\n  line-height: 1.21;\r\n  letter-spacing: 0.04em;\r\n\r\n  color: #9b9faa;\r\n\r\n  transition: bottom 300ms ease, color 300ms ease, font-size 300ms ease;\r\n  z-index: 10;\r\n  @media screen and (min-width: 768px) {\r\n    bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  position: absolute;\r\n  bottom: 0;\r\n\r\n  width: 100%;\r\n \r\n\r\n  letter-spacing: 0.04em;\r\n\r\n  border-bottom: 1px solid #e0e0e0;\r\n\r\n  transition: border-color 300ms ease;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    padding-bottom: 5px;\r\n  }\r\n\r\n  &:focus-within {\r\n    border-bottom: 1px solid #fc842d;\r\n    outline: none;\r\n  }\r\n\r\n  &:not(:placeholder-shown) {\r\n    border-bottom: 1px solid #fc842d;\r\n  }\r\n\r\n  &:not(:placeholder-shown) ~ span {\r\n    bottom: 25px;\r\n    color: #fc842d;\r\n\r\n    font-size: 12px;\r\n    @media screen and (min-width: 768px) {\r\n      bottom: 32px;\r\n    }\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FormLabel, LabelName, Input } from './InputField.styled';\r\n\r\nexport default function InputField({\r\n  labelName,\r\n  handlerEvent,\r\n  width,\r\n  right,\r\n  ...inputSetting\r\n}) {\r\n  return (\r\n    <>\r\n      <FormLabel style={(width = { width })}>\r\n        <Input onChange={handlerEvent} {...inputSetting} placeholder=\" \" />\r\n        <LabelName style={{ right: right }}>{labelName}</LabelName>\r\n      </FormLabel>\r\n    </>\r\n  );\r\n}\r\n\r\nInputField.propTypes = {\r\n  labelName: PropTypes.string,\r\n  handlerEvent: PropTypes.func.isRequired,\r\n  width: PropTypes.string,\r\n  right: PropTypes.number,\r\n};\r\n","import styled from '@emotion/styled';\r\nimport desktopMainBg from '../../assets/bg/desktopMainBg.png';\r\nimport tabletMainBg from '../../assets/bg/tabletMainBg.png';\r\n\r\nexport const BgImg = styled.div`\r\n  @media screen and (min-width: 768px) {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n\r\n    width: 100vw;\r\n    height: 100vh;\r\n\r\n    background-image: url(${tabletMainBg});\r\n    background-repeat: no-repeat;\r\n    background-position: right bottom;\r\n    background-size: contain;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    background-image: url(${desktopMainBg});\r\n  }\r\n`;\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex, FormControl,\r\n  Heading,\r\n  VStack\r\n} from \"@chakra-ui/react\";\r\nimport InputField from \"../../components/InputField/InputField\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport authOperations from \"../../redux/auth/authOperations\";\r\nimport {customColors} from \"../../theme/colors\";\r\nimport {BgImg} from \"./LogIn.styled\";\r\nimport * as Yup from 'yup';\r\nimport {noop} from \"../../utils/noop\";\r\nimport {authSelectors} from \"../../redux/auth/authSelectors\";\r\nimport DiaryFormValidation from \"../../components/DiaryAddProductForm/DiaryFormValidation/DiaryFormValidation\";\r\n\r\nconst LogInSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Invalid email')\r\n    .required('This field is required'),\r\n  password: Yup.string()\r\n    .min(5, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('This field is required'),\r\n});\r\n\r\nexport default function LogInPage() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const loginLoading = useSelector(authSelectors.loginLoading);\r\n  const onSubmit = (values) => {\r\n    dispatch(authOperations.logIn(values))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BgImg/>\r\n      <Flex\r\n        w={{xs: '100%', md: 'auto'}}\r\n        justify=\"flex-start\"\r\n        alignItems={{xs: 'flex-start', lg: 'center'}}\r\n        flexGrow='1'\r\n        pt={{xs: '38px', md: '150px'}}\r\n        pb={{xs: '50px', lg: '25px'}}\r\n      >\r\n        <Box\r\n          flexGrow='1'\r\n        >\r\n          <Heading\r\n            as='h1' size='xs'\r\n            mb={{xs: '50px', md: '34px'}}\r\n            w={{xs: '100%', md: 'auto'}}\r\n            textAlign={{xs: 'center', md: 'left'}}\r\n            color={customColors.sun[\"100\"]}\r\n            textTransform='uppercase'\r\n          >Sign In</Heading>\r\n\r\n          <Formik\r\n            initialValues={{\r\n              email: \"\",\r\n              password: \"\",\r\n            }}\r\n            validationSchema={LogInSchema}\r\n            onSubmit={onSubmit}\r\n          >\r\n            {() => (\r\n              <Form>\r\n                <VStack spacing={7} align=\"flex-start\" mb={{xs: '60px', lg: '60px'}}>\r\n                  <Field name='email'>\r\n                    {({field, form}) => (\r\n                      <Box w={{xs: '100%', md: '240px'}}>\r\n                        <FormControl isInvalid={form.errors.email && form.touched.email}>\r\n                          <InputField\r\n                            // autoComplete=\"off\"\r\n                            labelName=\"Email&nbsp;*\"\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            handlerEvent={noop}\r\n                            required\r\n                            width='100%'\r\n                            {...field}\r\n                          />\r\n                          <DiaryFormValidation text={form.errors.email}/>\r\n                        </FormControl>\r\n                      </Box>\r\n                    )}\r\n                  </Field>\r\n                  <Field name='password'>\r\n                    {({field, form}) => (\r\n                      <Box w={{xs: '100%', md: '240px'}}>\r\n                        <FormControl isInvalid={form.errors.password && form.touched.password}>\r\n                          <InputField\r\n                            // autoComplete=\"off\"\r\n                            labelName=\"Password&nbsp;*\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            handlerEvent={noop}\r\n                            required\r\n                            width='100%'\r\n                            {...field}\r\n                          />\r\n                          <DiaryFormValidation text={form.errors.password}/>\r\n                        </FormControl>\r\n                      </Box>\r\n                    )}\r\n                  </Field>\r\n                </VStack>\r\n                <Flex\r\n                  gap={6}\r\n                  flexDirection={{xs: 'column', md: 'row'}}\r\n                  alignItems={{xs: 'center'}}\r\n                >\r\n                  <Button variant={'primary'} type=\"submit\" isLoading={loginLoading}>Login</Button>\r\n                  <Button variant={'outline'} type=\"button\" onClick={() => navigate('/registration')}>Register</Button>\r\n                </Flex>\r\n\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n\r\n        </Box>\r\n      </Flex>\r\n    </>\r\n  );\r\n}\r\n","export const noop = () => {}\r\n"],"names":["DiaryFormValidation","text","fontSize","m","position","top","xs","md","FormLabel","styled","LabelName","Input","InputField","labelName","handlerEvent","width","right","inputSetting","style","onChange","placeholder","BgImg","tabletMainBg","desktopMainBg","LogInSchema","Yup","shape","email","required","password","min","max","LogInPage","dispatch","useDispatch","navigate","useNavigate","loginLoading","useSelector","authSelectors","w","justify","alignItems","lg","flexGrow","pt","pb","as","size","mb","textAlign","color","customColors","textTransform","initialValues","validationSchema","onSubmit","values","authOperations","spacing","align","name","field","form","isInvalid","errors","touched","type","noop","gap","flexDirection","variant","isLoading","onClick"],"sourceRoot":""}